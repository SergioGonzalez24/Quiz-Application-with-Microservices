
# Generated by CodiumAI
from classes.question import Question
from quizcontroller import Quizcontroller
from classes.quiz import Quiz

import pytest

from models.quizmodel import QuestionAnswers, Scores


class TestQuizcontroller:
    # # Tests that the select_number_of_questions method returns the expected template and initializes the quiz object to None.
    # def test_select_number_of_questions(self, mocker):
    #     # Happy path test
    #     quiz_controller = Quizcontroller()
    #     mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
    #     result = quiz_controller.select_number_of_questions()
    #     assert result == 'select_number_of_questions.html'
    #     assert quiz_controller.quiz is None
    #     # Sad path test
    #     quiz_controller.quiz = Quiz([])
    #     result = quiz_controller.select_number_of_questions()
    #     assert result == 'select_number_of_questions.html'
    #     assert quiz_controller.quiz is None
        
    
    # Tests that the select_number_of_questions method returns the expected template.
    def test_select_number_of_questions(self, mocker):
        mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
        quiz_controller = Quizcontroller()
        result = quiz_controller.select_number_of_questions()
        assert result == 'select_number_of_questions.html'

    # Tests that the show_question method returns the expected template and data.
    def test_show_question(self, mocker):
        mocker.patch('views.quizview.show_question', return_value='question.html')
        mocker.patch('models.quizmodel.Question.query.filter_by', return_value=[Question(question='What is 1+1?')])
        mocker.patch('models.quizmodel.QuestionAnswers.query.filter_by', return_value=[QuestionAnswers(answer='2', is_correct=True)])
        quiz_controller = Quizcontroller()
        quiz_controller.num_questions = 1
        result = quiz_controller.show_question()
        assert result == 'question.html'

    # Tests that the select_number_of_questions method handles the edge case of selecting 0 questions.
    def test_select_number_of_questions_zero(self, mocker):
        mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
        quiz_controller = Quizcontroller()
        quiz_controller.num_questions = 0
        result = quiz_controller.select_number_of_questions()
        assert result == 'select_number_of_questions.html'

    # Tests that the select_number_of_questions method handles the edge case of selecting a negative number of questions.
    def test_select_number_of_questions_negative(self, mocker):
        mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
        quiz_controller = Quizcontroller()
        quiz_controller.num_questions = -1
        result = quiz_controller.select_number_of_questions()
        assert result == 'select_number_of_questions.html'

    # Tests that the show_question_result method returns the expected template and data.
    def test_show_question_result(self, mocker):
        mocker.patch('views.quizview.show_question_result', return_value='answer_result.html')
        quiz_controller = Quizcontroller()
        quiz_controller.quiz = Quiz([Question(question_id=1, question='What is 1+1?', correct_answer='2', wrong_answers=['3', '4'])])
        mocker.patch.object(quiz_controller.quiz, 'check_answer', return_value=True)
        mocker.patch.object(quiz_controller.quiz, 'get_question', return_value=Question(question_id=1, question='What is 1+1?', correct_answer='2', wrong_answers=['3', '4']))
        mocker.patch.object(quiz_controller.quiz, 'elevate_question_index')
        result = quiz_controller.show_question_result()
        assert result == 'answer_result.html'

    # Tests that the show_score method returns the expected template and data.
    def test_show_score(self, mocker):
        mocker.patch('views.quizview.show_score', return_value='score.html')
        quiz_controller = Quizcontroller()
        quiz_controller.quiz = Quiz([Question(question_id=1, question='What is 1+1?', correct_answer='2', wrong_answers=['3', '4'])])
        quiz_controller.quiz.score = 1
        result = quiz_controller.show_score()
        assert result == 'score.html'

    # Tests that the show_high_scores method returns the expected template and data.
    def test_show_high_scores(self, mocker):
        mocker.patch('views.quizview.show_high_scores', return_value='high_scores.html')
        mocker.patch('models.quizmodel.Scores.query.order_by', return_value=[Scores(initials='AB', score=5)])
        mocker.patch('models.quizmodel.Scores.query.filter', return_value=mocker.Mock(count=mocker.Mock(return_value=0)))
        quiz_controller = Quizcontroller()
        mocker.patch.object(quiz_controller, 'initialize_quiz')
        result = quiz_controller.show_high_scores()
        assert result == 'high_scores.html'

    # Tests that the select_number_of_questions method handles the edge case of selecting more questions than available.
    def test_select_number_of_questions_more_than_available(self, mocker):
        mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
        mocker.patch('models.quizmodel.Question.query.order_by', return_value=mocker.Mock(first=mocker.Mock(id=1), desc=mocker.Mock(first=mocker.Mock(id=10))))
        quiz_controller = Quizcontroller()
        quiz_controller.num_questions = 11
        result = quiz_controller.select_number_of_questions()
        assert result == 'select_number_of_questions.html'

    # Tests that the initialize_quiz method handles the case of initializing quiz with no questions.
    def test_initialize_quiz_no_questions(self, mocker):
        mocker.patch('models.quizmodel.Question.query.filter', return_value=[])
        quiz_controller = Quizcontroller()
        quiz_controller.num_questions = 1
        quiz_controller.initialize_quiz()
        assert quiz_controller.quiz is None

    # Tests that the check_answer method handles the case of checking answer with no quiz initialized.
    def test_check_answer_no_quiz_initialized(self, mocker):
        quiz_controller = Quizcontroller()
        result = quiz_controller.check_answer('2')
        assert result is None

    # Tests that the show_question_result method handles the case of showing question result with no quiz initialized.
    def test_show_question_result_no_quiz_initialized(self, mocker):
        mocker.patch('views.quizview.show_question_result', return_value='answer_result.html')
        quiz_controller = Quizcontroller()
        result = quiz_controller.show_question_result()
        assert result == 'answer_result.html'

    # Tests that the show_question method handles the case of showing question with no quiz initialized.
    def test_show_question_no_quiz_initialized(self, mocker):
        mocker.patch('views.quizview.select_number_of_questions', return_value='select_number_of_questions.html')
        quiz_controller = Quizcontroller()
        result = quiz_controller.show_question()
        assert result == 'select_number_of_questions.html'